# ===================================================================
# üåê HOME MEDIA FORGE - NETWORK CORE MODULE
# ---------------------------------------------------
# Este m√≥dulo crea un ‚Äúbridge DNS interno‚Äù y servicios
# de descubrimiento mDNS/LLMNR para resolver *.local
# en Windows, Linux y macOS sin modificar el router.
# ===================================================================

services:
  # ---------------------------------------------------
  # üß† DNS BRIDGE (dnsmasq)
  # ---------------------------------------------------
  dnsbridge:
    image: jpillora/dnsmasq:latest
    container_name: dnsbridge
    hostname: dnsbridge
    network_mode: host # Escucha en el host para UDP/TCP 53
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      TZ: ${TZ:-America/Santiago}
    volumes:
      - ${STACK_CONFIG_DIR}/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf:ro
      - ${STACK_CONFIG_DIR}/dnsmasq:/etc/dnsmasq.d
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--no-resolv"
      - "--domain-needed"
      - "--bogus-priv"
      - "--local=/local/"
      - "--expand-hosts"
      - "--conf-dir=/etc/dnsmasq.d/,*.conf"
      - "--listen-address=0.0.0.0"
      - "--server=1.1.1.1"
      - "--server=8.8.8.8"
      - "--address=/.local/127.0.0.1"
    healthcheck:
      test: ["CMD", "dig", "@127.0.0.1", "localhost"]
      interval: 60s
      timeout: 5s
      retries: 3
    labels:
      - "hmf.module=network"
      - "hmf.description=Internal DNS bridge for .local resolution"

  # ---------------------------------------------------
  # üß© DOCKER SERVICE WATCHER
  # ---------------------------------------------------
  dnswatcher:
    image: jwilder/docker-gen
    container_name: dnswatcher
    hostname: dnswatcher
    depends_on:
      - dnsbridge
    restart: unless-stopped
    environment:
      - HMF_HOST_SEGMENT=${HMF_HOST_SEGMENT:-homemediaforge}
      - HMF_LOCAL_DOMAIN=${TRAEFIK_LOCAL_DOMAIN:-local}
      - HMF_MDNS_BIND_ADDRESS=${HMF_MDNS_BIND_ADDRESS:-}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${STACK_CONFIG_DIR}/dnsmasq:/etc/dnsmasq.d
      - ${STACK_CONFIG_DIR}/dnsmasq/dnsmasq.template:/etc/dnsmasq.d/dnsmasq.template:ro
      - ${STACK_CONFIG_DIR}/avahi/hosts.template:/etc/avahi/hosts.template:ro
      - ${STACK_CONFIG_DIR}/avahi/hosts:/etc/avahi/hosts
      - ${STACK_CONFIG_DIR}/mdns:/etc/mdns
    command: >
      -notify-sighup dnsbridge
      -notify-sighup avahi
      -watch /etc/dnsmasq.d/dnsmasq.template
      /etc/dnsmasq.d/99-containers.conf
      /etc/avahi/hosts.template
      /etc/avahi/hosts
      /etc/mdns/config.hcl.template
      /etc/mdns/config.hcl
    labels:
      - "hmf.module=network"
      - "hmf.description=Auto-registro de contenedores en DNS"

  # ---------------------------------------------------
  # üì£ mDNS REFLECTOR / AVAHI
  # ---------------------------------------------------
  avahi:
    build:
      context: .
      dockerfile: avahi.Dockerfile
    container_name: avahi
    hostname: avahi
    network_mode: host
    restart: unless-stopped
    volumes:
      - ${STACK_CONFIG_DIR}/avahi/services:/etc/avahi/services
      - ${STACK_CONFIG_DIR}/avahi/hosts:/etc/avahi/hosts
    labels:
      - "hmf.module=network"
      - "hmf.description=Multicast DNS reflector for local discovery"

  # ---------------------------------------------------
  # üì° mDNS SERVICE PUBLISHER (mdns-publisher)
  # ---------------------------------------------------
  mdns:
    build:
      context: .
      dockerfile: mdns.Dockerfile
    container_name: mdns
    hostname: mdns
    depends_on:
      - avahi
      - dnswatcher
    network_mode: host
    restart: unless-stopped
    environment:
      - MDNS_CONFIG_PATH=/etc/mdns/config.hcl
      - MDNS_REFRESH_WAIT=${HMF_MDNS_RELOAD_DELAY:-1}
      - HMF_MDNS_BIND_ADDRESS=${HMF_MDNS_BIND_ADDRESS}
    volumes:
      - ${STACK_CONFIG_DIR}/mdns:/etc/mdns
    labels:
      - "hmf.module=network"
      - "hmf.description=mdns-publisher for container hostnames"

  # ---------------------------------------------------
  # üí¨ LLMNR / NETBIOS RESPONDER (para Windows)
  # ---------------------------------------------------
  nbns:
    build:
      context: .
      dockerfile: responder.Dockerfile
    container_name: nbns
    hostname: nbns
    depends_on:
      - dnsbridge
    network_mode: host
    environment:
      - NET_IFACE=${NETWORK_INTERFACE:-enp0s3}
    restart: unless-stopped
    labels:
      - "hmf.module=network"
      - "hmf.description=Responder for Windows NetBIOS/LLMNR discovery"

  # ---------------------------------------------------
  # üö¶ TRAEFIK LOCAL PROXY (con certificados autofirmados)
  # ---------------------------------------------------
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v3.1}
    container_name: traefik
    hostname: traefik
    network_mode: host
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/Santiago}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${STACK_CONFIG_DIR}/traefik:/etc/traefik
      - ${STACK_CONFIG_DIR}/traefik/certs:/certs
      - ${STACK_CONFIG_DIR}/traefik/dynamic:/etc/traefik/dynamic
    command:
      # üß† Proveedores
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.useBindPortIP=${TRAEFIK_USE_BIND_PORT_IP:-true}"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      # üåê Entrypoints
      - "--entrypoints.http.address=:${TRAEFIK_HTTP_PORT:-80}"
      - "--entrypoints.https.address=:${TRAEFIK_HTTPS_PORT:-443}"
      # üîÅ Redirecci√≥n HTTP ‚Üí HTTPS
      - "--entrypoints.http.http.redirections.entrypoint.to=https"
      - "--entrypoints.http.http.redirections.entrypoint.scheme=https"
      # üîí Habilitar TLS en HTTPS
      - "--entrypoints.https.http.tls=true"
      # üß∞ Dashboard y ping
      - "--api.dashboard=${TRAEFIK_API_DASHBOARD:-true}"
      - "--ping=true"
      - "--ping.entryPoint=http"
      # ü™µ Logging
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      # ‚öôÔ∏è Seguridad y certificados
      - "--serversTransport.insecureSkipVerify=${TRAEFIK_INSECURE_SKIP_VERIFY:-true}"
      # üîê ACME (step-ca)
      - "--certificatesresolvers.hmf.acme.caServer=${STEP_CA_ACME_DIRECTORY:-https://127.0.0.1:9000/acme/hmf-acme/directory}"
      - "--certificatesresolvers.hmf.acme.email=${STEP_CA_ACME_EMAIL:-admin@homemediaforge.local}"
      - "--certificatesresolvers.hmf.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.hmf.acme.tlschallenge=true"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "hmf.module=network"
      - "hmf.description=Reverse proxy HTTPS autofirmado"
