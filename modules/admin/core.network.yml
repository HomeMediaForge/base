# ===================================================================
# 🌐 HOME MEDIA FORGE - NETWORK CORE MODULE
# ---------------------------------------------------
# Este módulo crea un “bridge DNS interno” y servicios
# de descubrimiento mDNS/LLMNR para resolver *.local
# en Windows, Linux y macOS sin modificar el router.
# ===================================================================

services:
  # ---------------------------------------------------
  # 🧠 DNS BRIDGE (dnsmasq)
  # ---------------------------------------------------
  dnsbridge:
    image: jpillora/dnsmasq:latest
    container_name: dnsbridge
    network_mode: host # Escucha en el host para UDP/TCP 53
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      TZ: ${TZ:-America/Santiago}
    volumes:
      - ${STACK_CONFIG_DIR}/dnsmasq:/etc/dnsmasq.d
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--no-resolv"
      - "--domain-needed"
      - "--bogus-priv"
      - "--local=/local/"
      - "--expand-hosts"
      - "--conf-dir=/etc/dnsmasq.d/,*.conf"
      - "--listen-address=0.0.0.0"
      - "--addn-hosts=/etc/dnsmasq.d/99-containers.conf"
      - "--server=1.1.1.1"
      - "--server=8.8.8.8"
      - "--address=/.local/127.0.0.1"
    healthcheck:
      test: ["CMD", "dig", "@127.0.0.1", "localhost"]
      interval: 60s
      timeout: 5s
      retries: 3
    labels:
      - "hmf.module=network"
      - "hmf.description=Internal DNS bridge for .local resolution"

  # ---------------------------------------------------
  # 🧩 DOCKER SERVICE WATCHER
  # ---------------------------------------------------
  dnswatcher:
    image: jwilder/docker-gen
    container_name: dnswatcher
    depends_on:
      - dnsbridge
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${STACK_CONFIG_DIR}/dnsmasq:/etc/dnsmasq.d
      - ${STACK_CONFIG_DIR}/dnsmasq/dnsmasq.template:/etc/dnsmasq.d/dnsmasq.template:ro
    command: >
      -notify-sighup dnsbridge
      -watch /etc/dnsmasq.d/dnsmasq.template
      /etc/dnsmasq.d/99-containers.conf
    labels:
      - "hmf.module=network"
      - "hmf.description=Auto-registro de contenedores en DNS"

  # ---------------------------------------------------
  # 📣 mDNS REFLECTOR / AVAHI
  # ---------------------------------------------------
  avahi:
    build:
      context: /opt/HomeMediaForge/modules/admin
      dockerfile: avahi.Dockerfile
    container_name: avahi
    network_mode: host
    restart: unless-stopped
    volumes:
      - ${STACK_CONFIG_DIR}/avahi:/etc/avahi/services
    labels:
      - "hmf.module=network"
      - "hmf.description=Multicast DNS reflector for local discovery"

  # ---------------------------------------------------
  # 💬 LLMNR / NETBIOS RESPONDER (para Windows)
  # ---------------------------------------------------
  nbns:
    build:
      context: /opt/HomeMediaForge/modules/admin
      dockerfile: responder.Dockerfile
    container_name: nbns
    network_mode: host
    environment:
      - NET_IFACE=${NETWORK_INTERFACE:-enp0s3}
    restart: unless-stopped
    labels:
      - "hmf.module=network"
      - "hmf.description=Responder for Windows NetBIOS/LLMNR discovery"

  # ---------------------------------------------------
  # 🚦 TRAEFIK LOCAL PROXY (con certificados autofirmados)
  # ---------------------------------------------------
  traefik:
    image: traefik:v3.1
    container_name: traefik
    network_mode: host
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${STACK_CONFIG_DIR}/traefik:/etc/traefik
      - ${STACK_CONFIG_DIR}/traefik/certs:/certs
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--serversTransport.insecureSkipVerify=true"
      - "--entrypoints.https.http.tls.certificates.certFile=/certs/hmf.crt"
      - "--entrypoints.https.http.tls.certificates.keyFile=/certs/hmf.key"
      - "--log.level=INFO"
    labels:
      - "hmf.module=network"
      - "hmf.description=Reverse proxy HTTPS autofirmado"
